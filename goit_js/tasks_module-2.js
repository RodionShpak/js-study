// ###########################################################################################################################################################

// // ==========================================Task-1
// РАННИЙ ВОЗВРАТ
// В функции может быть больше одного оператора return.
// Главное помнить, что выполнение функции прерывается когда интерпретатор встречает возврат,
// и весь код после него будет проигнорирован в текущем вызове функции.
// Возьмём уже знакомую нам функцию проверки совершеннолетия.
// Она работает, но здесь есть «лишний» код, то есть тело функции можно оптимизировать.
// В данном случае подойдёт приём(паттерн) «ранний возврат».

// function checkAge(age) {
//     let message;
//     if (age >= 18) {
//         message = "Вы совершеннолетний человек";
//     } else {
//         message = "Вы не совершеннолетний человек";
//     }
//     return message;
// }
// Если условие в if выполняется, то есть приводится к true, возвращаем строку "You are an adult" и код ниже уже не исполнится.
// Если условие в if не выполняется, то есть приводится к false, возвращаем строку "You are a minor".
// Используя паттерн «ранний возврат» и то, что выполнение функции прерывается на операторе return, мы избавляемся от лишней переменной и блока else.
// То есть этот приём помогает «разгладить» ветвления.

// //  --------------------===================== Сonditions --------------------=====================
// Запиши условие в инструкции if так, чтобы функция работала правильно.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkAge(age).
// В выражении проверки возраста использован оператор >=
// Вызов checkAge(20) возвращает "You are an adult"
// Вызов checkAge(8) возвращает "You are a minor"
// Вызов checkAge(14) возвращает "You are a minor"
// Вызов checkAge(38) возвращает "You are an adult"
// В теле функции есть только одна инструкция if
// В теле функции нет инструкции else или else if

// // --------------------===================== Result --------------------=====================
// function checkAge(age) {
//     if (age >= 18) {
//         return "You are an adult";
//     }
//     return "You are a minor";
// }

// ###########################################################################################################################################################

// // ==========================================Task-2
// ЗАДАЧА: ПРОВЕРКА ПАРОЛЯ(РАННИЙ ВОЗВРАТ)

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkPassword получает пароль пользователя в параметр password,
// проверяет его на совпадение с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения.
// Проведи рефакторинг кода функции checkPassword используя паттерн «ранний возврат»:

// удали переменную message
// удали else
// код должен работать так же, как и до оптимизации

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkPassword(password)
// Вызов checkPassword("mangohackzor") возвращает "Access denied, wrong password!"
// Вызов checkPassword("polyhax") возвращает "Access denied, wrong password!"
// Вызов checkPassword("jqueryismyjam") возвращает "Welcome!"

// // --------------------===================== Result --------------------=====================

// BEFORE

// function checkPassword(password) {
//     const ADMIN_PASSWORD = "jqueryismyjam";
//     let message;
//     if (password === ADMIN_PASSWORD) {
//         message = "Welcome!";
//     } else {
//         message = "Access denied, wrong password!";
//     }
//     return message;
// }

// AFTER

// function checkPassword(password) {
//     const ADMIN_PASSWORD = "jqueryismyjam";
//     if (password === ADMIN_PASSWORD) {
//         return "Welcome!";
//     }
//     return "Access denied, wrong password!";
// }

// ###########################################################################################################################################################

// // ==========================================Task-3
// ЗАДАЧА: СКЛАД ТОВАРОВ 3.0

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkStorage проверяет возможность оформления заказа и возвращает сообщение о результате.
// Она принимает два параметра, значения которых будут задаваться во время её вызова.
//     available - доступное количество товаров на складе
// ordered - количество единиц товара в заказе
// Проведи рефакторинг кода функции checkStorage используя паттерн «ранний возврат».

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkStorage(available, ordered)
// Вызов checkStorage(100, 50) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(100, 130) возвращает "Your order is too large, not enough goods in stock!"
// Вызов checkStorage(70, 0) возвращает "Your order is empty!"
// Вызов checkStorage(200, 20) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(200, 250) возвращает "Your order is too large, not enough goods in stock!"
// Вызов checkStorage(150, 0) возвращает "Your order is empty!"

// // --------------------===================== Result --------------------=====================

// BEFORE

// function checkStorage(available, ordered) {
//     let message;
//     if (ordered === 0) {
//         message = "Your order is empty!";
//     } else if (ordered > available) {
//         message = "Your order is too large, not enough goods in stock!";
//     } else {
//         message = "The order is accepted, our manager will contact you";
//     }
//     return message;
// }

// AFTER

// function checkStorage(available, ordered) {
//     if (ordered === 0) {
//          return "Your order is empty!";
//     }
//     if (ordered > available) {
//          return "Your order is too large, not enough goods in stock!";
//     }
//          return "The order is accepted, our manager will contact you";
// }

// ###########################################################################################################################################################

// // ==========================================Task-4

// //  --------------------===================== Сonditions --------------------=====================

// //  --------------------===================== Test --------------------=====================

// // --------------------===================== Result --------------------=====================





















// ###########################################################################################################################################################

// // ==========================================Task-

// //  --------------------===================== Сonditions --------------------=====================

// //  --------------------===================== Test --------------------=====================

// // --------------------===================== Result --------------------=====================
