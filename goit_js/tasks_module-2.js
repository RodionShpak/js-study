// ###########################################################################################################################################################

// // ==========================================Task-1
// РАННИЙ ВОЗВРАТ
// В функции может быть больше одного оператора return.
// Главное помнить, что выполнение функции прерывается когда интерпретатор встречает возврат,
// и весь код после него будет проигнорирован в текущем вызове функции.
// Возьмём уже знакомую нам функцию проверки совершеннолетия.
// Она работает, но здесь есть «лишний» код, то есть тело функции можно оптимизировать.
// В данном случае подойдёт приём(паттерн) «ранний возврат».

// function checkAge(age) {
//     let message;
//     if (age >= 18) {
//         message = "Вы совершеннолетний человек";
//     } else {
//         message = "Вы не совершеннолетний человек";
//     }
//     return message;
// }
// Если условие в if выполняется, то есть приводится к true, возвращаем строку "You are an adult" и код ниже уже не исполнится.
// Если условие в if не выполняется, то есть приводится к false, возвращаем строку "You are a minor".
// Используя паттерн «ранний возврат» и то, что выполнение функции прерывается на операторе return, мы избавляемся от лишней переменной и блока else.
// То есть этот приём помогает «разгладить» ветвления.

// //  --------------------===================== Сonditions --------------------=====================
// Запиши условие в инструкции if так, чтобы функция работала правильно.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkAge(age).
// В выражении проверки возраста использован оператор >=
// Вызов checkAge(20) возвращает "You are an adult"
// Вызов checkAge(8) возвращает "You are a minor"
// Вызов checkAge(14) возвращает "You are a minor"
// Вызов checkAge(38) возвращает "You are an adult"
// В теле функции есть только одна инструкция if
// В теле функции нет инструкции else или else if

// // --------------------===================== Result --------------------=====================
// function checkAge(age) {
//     if (age >= 18) {
//         return "You are an adult";
//     }
//     return "You are a minor";
// }

// ###########################################################################################################################################################

// // ==========================================Task-2
// ЗАДАЧА: ПРОВЕРКА ПАРОЛЯ(РАННИЙ ВОЗВРАТ)

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkPassword получает пароль пользователя в параметр password,
// проверяет его на совпадение с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения.
// Проведи рефакторинг кода функции checkPassword используя паттерн «ранний возврат»:

// удали переменную message
// удали else
// код должен работать так же, как и до оптимизации

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkPassword(password)
// Вызов checkPassword("mangohackzor") возвращает "Access denied, wrong password!"
// Вызов checkPassword("polyhax") возвращает "Access denied, wrong password!"
// Вызов checkPassword("jqueryismyjam") возвращает "Welcome!"

// // --------------------===================== Result --------------------=====================

// BEFORE

// function checkPassword(password) {
//     const ADMIN_PASSWORD = "jqueryismyjam";
//     let message;
//     if (password === ADMIN_PASSWORD) {
//         message = "Welcome!";
//     } else {
//         message = "Access denied, wrong password!";
//     }
//     return message;
// }

// AFTER

// function checkPassword(password) {
//     const ADMIN_PASSWORD = "jqueryismyjam";
//     if (password === ADMIN_PASSWORD) {
//         return "Welcome!";
//     }
//     return "Access denied, wrong password!";
// }

// ###########################################################################################################################################################

// // ==========================================Task-3
// ЗАДАЧА: СКЛАД ТОВАРОВ 3.0

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkStorage проверяет возможность оформления заказа и возвращает сообщение о результате.
// Она принимает два параметра, значения которых будут задаваться во время её вызова.
//     available - доступное количество товаров на складе
// ordered - количество единиц товара в заказе
// Проведи рефакторинг кода функции checkStorage используя паттерн «ранний возврат».

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkStorage(available, ordered)
// Вызов checkStorage(100, 50) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(100, 130) возвращает "Your order is too large, not enough goods in stock!"
// Вызов checkStorage(70, 0) возвращает "Your order is empty!"
// Вызов checkStorage(200, 20) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(200, 250) возвращает "Your order is too large, not enough goods in stock!"
// Вызов checkStorage(150, 0) возвращает "Your order is empty!"

// // --------------------===================== Result --------------------=====================

// BEFORE

// function checkStorage(available, ordered) {
//     let message;
//     if (ordered === 0) {
//         message = "Your order is empty!";
//     } else if (ordered > available) {
//         message = "Your order is too large, not enough goods in stock!";
//     } else {
//         message = "The order is accepted, our manager will contact you";
//     }
//     return message;
// }

// AFTER

// function checkStorage(available, ordered) {
//     if (ordered === 0) {
//          return "Your order is empty!";
//     }
//     if (ordered > available) {
//          return "Your order is too large, not enough goods in stock!";
//     }
//          return "The order is accepted, our manager will contact you";
// }

// ###########################################################################################################################################################

// // ==========================================Task-4
// СОЗДАНИЕ МАССИВА
// Массив используется для хранения упорядоченной коллекции элементов.
// Он объявляется открывающей и закрывающей квадратной скобками[] - литералом массива.
// Внутри скобок каждый элемент массива разделяется запятой.

// const planets = ["Earth", "Mars", "Venus"];
// Полезно
// При объявлении переменной для объекта или массива программисты обычно используют const.
// Они делают это для того, чтобы случайно не перезаписать значение,
// т.к.попытка перезаписи вызовет ошибку до того как код попадет к пользователю.

// //  --------------------===================== Сonditions --------------------=====================
// Объяви переменную fruits и присвой ей массив фруктов - строк "apple", "plum", "pear" и "orange".

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная fruits
// Значение переменной fruits это массив["apple", "plum", "pear", "orange"]

// // --------------------===================== Result --------------------=====================
// const fruits = ["apple", "plum", "pear", "orange"];

// ###########################################################################################################################################################

// // ==========================================Task-5
// ДОСТУП К ЭЛЕМЕНТАМ ПО ИНДЕКСУ
// Для доступа к значению элемента массива применяют синтаксис квадратных скобок массив[индекс].
// Между именем переменной массива и квадратными скобками не должно быть пробела.
// Внимание
// Индексация элементов массива начинается с нуля.

// const planets = ["Earth", "Mars", "Venus"];
// planets[0]; // "Earth"
// planets[2]; // "Venus"

// //  --------------------===================== Сonditions --------------------=====================
// Объяви три переменные и присвой каждой из них значение, используя нотацию квадратных скобок.
// Имя переменной	Значение переменной
// firstElement	первый элемент массива
// secondElement	второй элемент массива
// lastElement	последний элемент массива

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная firstElement
// Значение переменной firstElement это строка "apple"
// Объявлена переменная secondElement
// Значение переменной secondElement это строка "plum"
// Объявлена переменная lastElement
// Значение переменной lastElement это строка "orange"

// // --------------------===================== Result --------------------=====================
// const fruits = ["apple", "plum", "pear", "orange"];
// const firstElement = fruits[0];
// const secondElement = fruits[1];
// const lastElement = fruits[3];

// ###########################################################################################################################################################

// // ==========================================Task-6
// ПЕРЕОПРЕДЕЛЕНИЕ ЗНАЧЕНИЯ ЭЛЕМЕНТА
// В отличии от строк, элементы массива можно изменять обратившись к ним по индексу и присвоив другое значение.

// const numbers = [1, 2, 3, 4, 5];
// numbers[0] = 7;
// numbers[2] = 14;
// console.log(numbers); // [7, 2, 14, 4, 5];

// //  --------------------===================== Сonditions --------------------=====================
// Переопредели значения элементов с индексами 1 и 3. Замени "plum" на "peach", а "orange" на "banana".

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная fruits
// Значение переменной fruits это массив["apple", "peach", "pear", "banana"]

// // --------------------===================== Result --------------------=====================
// const fruits = ["apple", "plum", "pear", "orange"];
// fruits[1] = "peach";
// fruits[3] = "banana";

// ###########################################################################################################################################################

// // ==========================================Task-7
// ДЛИНА МАССИВА
// Длина массива, то есть число его элементов, хранится в свойстве length.
// Это динамическая величина, которая изменяется автоматически при добавлении или удалении элементов.
// const planets = ["Earth", "Mars", "Venus"];
// console.log(planets.length); // 3

// //  --------------------===================== Сonditions --------------------=====================
// Объяви переменную fruitsArrayLength и присвой ей длину массива fruits используя свойство length.

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная fruitsArrayLength
// Значение переменной fruitsArrayLength это число 4

// // --------------------===================== Result --------------------=====================
// const fruits = ["apple", "peach", "pear", "banana"];
// const fruitsArrayLength = fruits.length;

// ###########################################################################################################################################################

// // ==========================================Task-8
// ИНДЕКС ПОСЛЕДНЕГО ЭЛЕМЕНТА
// Чаще всего, мы заранее в коде не знаем какая будет длина массива.
// Для того, чтобы получить значение последнего элемента применяется следующий подход - длина массива всегда на единицу больше,
// чем индекс последнего элемента.Используя формулу длина_массива - 1 можно получить значение последнего элемента массива произвольной длины.

// const planets = ["Earth", "Mars", "Venus"];
// const lastElementIndex = planets.length - 1;
// planets[lastElementIndex]; // "Venus"

// //  --------------------===================== Сonditions --------------------=====================
// Объяви две переменные:
// Имя переменной	Ожидаемое значение
// lastElementIndex	Индекс последнего элемента масcива fruits через длина_массива - 1
// lastElement	Значение последнего элемента массива

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная lastElementIndex
// Значение переменной lastElementIndex это число 3
// Объявлена переменная lastElement
// Значение переменной lastElement это строка "banana"

// // --------------------===================== Result --------------------=====================
// const fruits = ["apple", "peach", "pear", "banana"];
// const lastElementIndex = fruits.length - 1;
// const lastElement = fruits[lastElementIndex];

// ###########################################################################################################################################################

// // ==========================================Task-9
// ЗАДАЧА: КРАЙНИЕ ЭЛЕМЕНТЫ МАССИВА

// //  --------------------===================== Сonditions --------------------=====================
// Напиши функцию getExtremeElements(array) которая принимает один параметр array - массив элементов произвольной длины.
// Функция должна возвращать массив из двух элементов - первого и последнего элемента параметра array.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция getExtremeElements(array)
// Вызов getExtremeElements([1, 2, 3, 4, 5]) возвращает[1, 5]
// Вызов getExtremeElements(["Earth", "Mars", "Venus"]) возвращает["Earth", "Venus"]
// Вызов getExtremeElements(["apple", "peach", "pear", "banana"]) возвращает["apple", "banana"]

// // --------------------===================== Result --------------------=====================
// function getExtremeElements(array) {
//     let mass = [];
//     mass.push(array[0]);
//     let a = array.length - 1;
//     mass.push(array[a]);
//     return mass;
// }

// ###########################################################################################################################################################

// // ==========================================Task-10
// МЕТОД СТРОК SPLIT()
// Метод split(delimeter) позволяет превратить строку в массив, «разбив» его по разделителю delimeter.
// Если разделитель это пустая строка, то получится массив отдельных символов.
// Разделителем может быть один или несколько символов.

// const name = "Mango";
// console.log(name.split("")); // ["M", "a", "n", "g", "o"]

// const message = "JavaScript essentials";
// console.log(message.split(" ")); // ["JavaScript", "essentials"]

// //  --------------------===================== Сonditions --------------------=====================
// Дополни код функции splitMessage(message, delimeter) так,
// чтобы она возвращала в переменной words результат разделения строки message по разделителю delimeter - массив строк.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция splitMessage(message, delimeter)
// Вызов splitMessage("Mango hurries to the train", " ") возвращает["Mango", "hurries", "to", "the", "train"]
// Вызов splitMessage("Mango", "") возвращает["M", "a", "n", "g", "o"]
// Вызов splitMessage("best_for_week", "_") возвращает["best", "for", "week"]

// // --------------------===================== Result --------------------=====================

// BEFORE

// function splitMessage(message, delimeter) {
//     let words;
//     return words;
// }

// AFTER

// function splitMessage(message, delimeter) {
//     return message.split(delimeter);
// }




















// ###########################################################################################################################################################

// // ==========================================Task-

// //  --------------------===================== Сonditions --------------------=====================

// //  --------------------===================== Test --------------------=====================

// // --------------------===================== Result --------------------=====================
