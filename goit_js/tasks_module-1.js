// //==========================================Task-1
// ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ
// Переменные используются для хранения данных и состоят из идентификатора(имени) и области в памяти, где хранится их значение.
// Переменную можно представить как коробку с надписью(именем), в которой что - то лежит(значение).
// < ключевое слово > <имя переменной> = <значение>
// Объявление переменной начинается с ключевого слова const.
// Такая переменная должна быть сразу инициализирована значением, после чего его нельзя переопределить.
// Внимание
// Создание переменной без ключевого слова const приведёт к ошибке.
// const age = 20;
// const username = "Mango";
// const socialProfileTag = "@gluck";
// const totalWorkerSalary = 4052;
// В JavaScript имя перенной записывается в camelCase-нотации. Первое слово пишется строчными буквами,
// а каждое последующее начинается с заглавной. Имена чувствительны к регистру, то есть переменные user, usEr и User различны.

// //--------------------===================== Сonditions --------------------=====================
// Объяви две переменные, productName для названия товара и pricePerItem для хранения цены за штуку.
// При объявлении присвой переменным следующие характеристики товара:
// название - строка "Droid"
// цена за штуку - число 2000

// //--------------------===================== Test --------------------=====================
// Объявлена переменная productName
// Значение переменной productName это строка "Droid"
// Объявлена переменная pricePerItem
// Значение переменной pricePerItem это число 2000

// //--------------------===================== Result --------------------=====================
// const productName = "Droid";
// const pricePerItem = 2000;

// ###########################################################################################################################################################

// // ==========================================Task-2
// ПЕРЕОПРЕДЕЛЕНИЕ ЗНАЧЕНИЯ ПЕРЕМЕННОЙ
// Для того, чтобы объявить переменную, которой в будущем можно будет присвоить новое значение, используется ключевое слово let.
// Создание переменной без ключевого слова let или const приведёт к ошибке.

// let age = 5;
// age = 10;

// let username = "Mango";
// username = "Poly";
// Попытка обратиться к переменной по имени до её объявления вызовет ошибку.

// Например, нельзя пытаться прочитать или изменить значение переменой до ее объявления:

// ❌ Неправильно, будет ошибка
// age = 15; // ReferenceError: Cannot access 'age' before initialization
// console.log(age); // ReferenceError: age is not defined

// Объявление переменной age
// let age = 20;

// // ✅ Правильно, обращаемся после объявления
// age = 25;
// console.log(age); // 25

// // --------------------===================== Сonditions --------------------=====================
// Имя товара изменили на "Repair droid" и увеличили его цену на 1500 кредитов.
// Переопредели значения переменных pricePerItem и productName после их объявления.

// //--------------------===================== Test --------------------=====================
// Переменная pricePerItem объявлена с помощью let
// При объявлении переменной pricePerItem присвоено значение - число 2000
// Переменной pricePerItem присвоено новое значение, больше чем предыдущее на 1500
// Переменная productName объявлена с помощью let
// При объявлении переменной productName присвоено значение - строка "Droid"
// Переменной productName присвоено новое значение - строка "Repair droid"
// //--------------------===================== Result --------------------=====================
// let productName = "Droid";
// let pricePerItem = 2000;

// productName = "Repair droid";
// console.log("Repair droid");

// pricePerItem = 3500;
// console.log(pricePerItem);

// ###########################################################################################################################################################

// // ==========================================Task-3
// ТИПЫ ПРИМИТИВОВ(ЧИСЛА, СТРОКИ, БУЛИ)
// В JavaScript переменная не ассоциируется с каким - либо типом данных, тип есть у её значения.То есть переменная может хранить значения разных типов.

// Number - целые числа и числа с плавающей запятой(точкой).
// String - строки, последовательность из нуля или более символов.Строка начинается и заканчивается одиночной ' или двойными кавычками ".
// Boolean - логический тип данных, флаги состояния.Всего два значения: true и false.
// Например, на вопрос включен ли свет в комнате можно ответить да(true) или нет(false).
// Числа
// const age = 20;
// const salary = 3710.84;

// Строки
// const name = "Mango";
// const description = "JavaSript essentials";

// Були
// const isModalOpen = true;
// const isLoggedIn = false;

// //  --------------------===================== Сonditions --------------------=====================
// Объяви следующие переменные используя ключевое слово const или let и присвой им соответствующие значения.

// topSpeed - число 160.
// distance - число 617.54.
// login - строка "mango935".
// isOnline - буль true.
// isAdmin - буль false.

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная topSpeed
// Значение переменной topSpeed это число 160
// Объявлена переменная distance
// Значение переменной distance это число 617.54
// Объявлена переменная login
// Значение переменной login это строка "mango935"
// Объявлена переменная isOnline
// Значение переменной isOnline это буль true
// Объявлена переменная isAdmin
// Значение переменной isAdmin это буль false

// // --------------------===================== Result --------------------=====================
// const topSpeed = 160;
// const distance = 617.54;
// const login = "mango935";
// const isOnline = true;
// const isAdmin = false;

// ###########################################################################################################################################################

// // ==========================================Task-4
// МАТЕМАТИЧЕСКИЕ ОПЕРАТОРЫ
// Назначение, функционал и приоритет(порядок) операций ничем не отличаются от школьного курса алгебры.Операторы возвращают значение как результат выражения.

// const x = 10;
// const y = 5;

// Сложение
// console.log(x + y); // 15

// Вычитание
// console.log(x - y); // 5

// Умножение
// console.log(x * y); // 50

// Деление
// console.log(x / y); // 2
// Полезно
// Важно запомнить правильное именование составляющих алгебраического выражения: +, -, * и / называются операторами, а то на чём они применяются(числа) - операнды.

// //  --------------------===================== Сonditions --------------------=====================
// Дополни код, присвоив переменной totalPrice выражение для подсчёта общей суммы заказа.
// Переменная pricePerItem хранит цену одной единицы товара, а orderedQuantity - количество единиц товара в заказе.

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная pricePerItem
// Значение переменной pricePerItem это число 3500
// Объявлена переменная orderedQuantity
// Значение переменной orderedQuantity это число 4
// Объявлена переменная totalPrice
// Значение переменной totalPrice это число 14000
// Использован оператор *

// // --------------------===================== Result --------------------=====================
// const pricePerItem = 3500;
// const orderedQuantity = 4;
// const totalPrice = pricePerItem * orderedQuantity;

// ###########################################################################################################################################################

// // ==========================================Task-5
// ШАБЛОННЫЕ СТРОКИ
// Шаблонные строки это альтернатива конкатенации с более удобным синтаксисом.Шаблонная строка заключена в обратные(косые) кавычки вместо двойных или одинарных и может содержать местозаполнители, которые обозначаются знаком доллара и фигурными скобками - ${ выражение }.

// const guestName = "Mango";
// const roomNumber = 207;
// const greeting = `Добро пожаловать ${guestName}, вы поселены в номер ${roomNumber}`;

// //  --------------------===================== Сonditions --------------------=====================
// Объяви перемнную message и запиши в неё сообщение о покупке, строку в формате: "You picked <имя товара>, price per item is <цена товара> credits".
// Где < имя товара > и < цена товара > это значения переменных productName и pricePerItem.
// Используй синтаксис шаблонных строк.

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная productName
// Значение переменной productName это строка "Droid"
// Объявлена переменная pricePerItem
// Значение переменной price это число 3500
// Объявлена переменная message
// Значение переменной message это строка "You picked Droid, price per item is 3500 credits"

// // --------------------===================== Result --------------------=====================
// const productName = "Droid";
// const pricePerItem = 3500;
// const message = `You picked ${productName}, price per item is ${pricePerItem} credits`;

// ###########################################################################################################################################################

// // ==========================================Task-6
// ЗАДАЧА: ЗАКАЗ ПРОДУКТА

// //  --------------------===================== Сonditions --------------------=====================
// Магазин по продаже ремонтных дроидов готов к открытию, осталось написать скрипт для их заказа.Объяви переменные и присвой им соответствующие значения:

// pricePerDroid - цена одного дроида, значение 800
// orderedQuantity - количество дроидов в заказе, значение 6
// deliveryFee - стоимость доставки, значение 50
// totalPrice - общая сумма заказа к оплате, не забудь о стоимости доставки
// message - сообщение о состоянии заказа в формате "You ordered droids worth <total price> credits. Delivery (<delivery fee> credits) is included in total price."

// //  --------------------===================== Test --------------------=====================
// Объявлена переменная orderedQuantity
// Значение переменной orderedQuantity это число 6
// Объявлена переменная pricePerDroid
// Значение переменной pricePerDroid это число 800
// Объявлена переменная deliveryFee
// Значение переменной deliveryFee это число 50
// Объявлена переменная totalPrice
// Значение переменной totalPrice это число 4850
// Объявлена переменная message
// Значение переменной message это строка "You ordered droids worth 4850 credits. Delivery (50 credits) is included in total price."

// // --------------------===================== Result --------------------=====================
// const pricePerDroid = 800;
// const orderedQuantity = 6;
// const deliveryFee = 50;

// const totalPrice = (pricePerDroid * orderedQuantity) + deliveryFee;
// const message = `You ordered droids worth ${totalPrice} credits. Delivery (${deliveryFee} credits) is included in total price.`;

// ###########################################################################################################################################################

// // ==========================================Task-7
// ОБЪЯВЛЕНИЕ И ВЫЗОВ ФУНКЦИИ
// Функция - это подпрограмма, независимая часть кода, предназначенная для многократного выполнения конкретной задачи с разными начальными значениями.
// Функцию можно представить как чёрный ящик, она получает что - то на входе(данные), и возвращает что - то на выходе(результат выполнения кода внутри неё).

// // 1. Объявление функции multiply
// function multiply() {
//     // Тело функции
//     console.log("multiply function invocation");
// }

// // 2. Вызовы функции multiply
// multiply(); // multiply function invocation
// multiply(); // multiply function invocation
// multiply(); // multiply function invocation
// Объявление функции начинается с ключевого слова function, за которым идёт её имя - глагол отвечающий на вопрос «Что сделать ?» и пара круглых скобок.
// Тело функции заключено в фигурные скобки { } и содержит инструкции, которые необходимо выполнить при её вызове.
// Затем, когда необходимо, функция вызывается с помощью имени и пары круглых скобок.

// //  --------------------===================== Сonditions --------------------=====================
// Объяви функцию sayHi, внутри которой добавь console.log() со строкой "Hello, this is my first function!".После объявления вызови функцию sayHi.

// //  --------------------===================== Test --------------------=====================
// Ожидается объявление функции
// Функции присвоено имя sayHi
// В теле функции sayHi есть console.log("Hello, this is my first function!")
// После объявления есть вызов функции sayHi

// // --------------------===================== Result --------------------=====================
// function sayHi() {
//     console.log("Hello, this is my first function!");
// }
// sayHi();

// ###########################################################################################################################################################

// // ==========================================Task-8
// ПАРАМЕТРЫ И АРГУМЕНТЫ
// В круглых скобках после имени функции идут параметры - перечисление данных, которые функция ожидает при вызове.
// Параметры - это локальные переменные доступные только в теле функции.Они разделяются запятыми.
// Параметров может быть несколько или вообще их может не быть, тогда записываются просто пустые круглые скобки.
// При вызове функции, в круглых скобках можно передать аргументы - значения для объявленных параметров функции.

// // 1. Объявление параметров x, y, z
// function multiply(x, y, z) {
//     console.log(`Результат умножения равен ${x * y * z}`);
// }

// // 2. Передача аргументов
// multiply(2, 3, 5); // Результат умножения равен 30
// multiply(4, 8, 12); // Результат умножения равен 384
// multiply(17, 6, 25); // Результат умножения равен 2550
// Порядок передачи аргументов должен соответствует порядку объявленых параметров:
// значение первого аргумента будет присвоено первому параметру, второго аргумента второму параметру и т.д.

// //  --------------------===================== Сonditions --------------------=====================
// Функция add должна уметь складывать три числа и выводить результат в консоль.
// Добавь функции add три параметра a, b и c, которые будут получать значения аргументов при её вызове.
// Дополни console.log() так, чтобы он логировал строку "Addition result equals <result>", где < result > это сумма переданных чисел.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция add(a, b, c)
// Вызов add(15, 27, 10) выводит в консоль "Addition result equals 52"
// Вызов add(10, 20, 30) выводит в консоль "Addition result equals 60"
// Вызов add(5, 10, 15) выводит в консоль "Addition result equals 30"

// // --------------------===================== Result --------------------=====================
// function add(a, b, c) {
//     console.log(`Addition result equals ${a + b + c}`);
// }
// add(15, 27, 10);
// add(10, 20, 30);
// add(5, 10, 15);

// ###########################################################################################################################################################

// // ==========================================Task-9
// ВОЗВРАТ ЗНАЧЕНИЯ
// Оператор return используется для передачи значения из тела функции во внешний код.
// Когда интерпретатор встречает return, он сразу же выходит из функции(прекращает её выполнение),
// и возвращает указанное значение в то место кода, где функция была вызвана.

// function multiply(x, y, z) {
//     console.log("Код до return выполняется как обычно");
//     // Возвращаем результат выражения умножения
//     return x * y * z;
//     console.log("Этот лог никогда не выполнится, он стоит после return");
// }

// // Результат работы функции можно сохранить в переменную
// let result = multiply(2, 3, 5);
// console.log(result); // 30

// result = multiply(4, 8, 12);
// console.log(result); // 384

// result = multiply(17, 6, 25);
// console.log(result); // 2550
// Оператор return без явно указанного значения возвращает специальное значение undefined.При отсутствии return в теле функции, она все равно вернёт undefined.

// //  --------------------===================== Сonditions --------------------=====================
// Дополни код функции add так, чтобы она возвращала результат сложения значений трёх параметров a, b и c.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция add(a, b, c)
// В функции add есть оператор return
// Вызов add(15, 27, 10) возвращает 52
// Вызов add(10, 20, 30) возвращает 60
// Вызов add(5, 10, 15) возвращает 30
// Вызов функции со случайными, но валидными аргументами, возвращает правильное значение

// // --------------------===================== Result --------------------=====================
// function add(a, b, c) {
// return a + b + c;
// }
// console.log(add(15, 27, 10));
// console.log(add(10, 20, 30));
// console.log(add(5, 10, 15));
// add(2, 5, 8); // 15

// ###########################################################################################################################################################

// // ==========================================Task-10
// ЗАДАЧА: ШАБЛОННЫЕ СТРОКИ 2.0

// //  --------------------===================== Сonditions --------------------=====================
// Функция makeMessage(name, price) составляет и возвращает сообщение о покупке.
// Она объявляет два параметра, значения которых будут задаваться во время её вызова.

// name - название товара
// price - цена товара

// Дополни код функции так, чтобы в переменную message записывалась строка "You picked <product name>, price per item is <product price> credits",
// где < product name > и < product price > это значения параметров name и price.Используй синтаксис шаблонных строк.
// Внимание
// Обрати внимание на то, что в коде нет вызовов функции makeMessage.
// С этого задания и дальше мы сами будем вызывать твои функции и проверять то, как они работают.
// Результат наших проверок ты увидишь в блоке Результаты под редактором кода.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция makeMessage(name, price)
// Вызов makeMessage('Radar', 6150) возвращает "You picked Radar, price per item is 6150 credits"
// Вызов makeMessage('Scanner', 3500) возвращает "You picked Scanner, price per item is 3500 credits"
// Вызов makeMessage('Reactor', 8000) возвращает "You picked Reactor, price per item is 8000 credits"
// Вызов makeMessage('Engine', 4070) возвращает "You picked Engine, price per item is 4070 credits"

// // --------------------===================== Result --------------------=====================
// function makeMessage(name, price) {
//     const message = `You picked ${name}, price per item is ${price} credits`;
//     return message;
// };

// console.log(makeMessage("Radar", 6150))
// console.log(makeMessage("Scanner", 3500))
// console.log(makeMessage("Reactor", 8000))
// console.log(makeMessage("Engine", 4070))

// ###########################################################################################################################################################

// // ==========================================Task-11
// ЗАДАЧА: МАТЕМАТИЧЕСКИЕ ОПЕРАТОРЫ 2.0

// //  --------------------===================== Сonditions --------------------=====================
// Функция calculateTotalPrice считает и возвращает общую сумму покупки.Она принимает два параметра, значения которых будут задаваться во время её вызова.
//      orderedQuantity - количество единиц товара в заказе;
//      pricePerItem - цена одной единицы товара.
// Дополни код функции так, чтобы в переменную totalPrice записывалась общая сумма покупки, результат умножения кол - ва товаров на цену одного.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция calculateTotalPrice(orderedQuantity, pricePerItem)
// Вызов calculateTotalPrice(5, 100) возвращает 500
// Вызов calculateTotalPrice(8, 60) возвращает 480
// Вызов calculateTotalPrice(3, 400) возвращает 1200
// Вызов calculateTotalPrice(1, 3500) возвращает 3500
// Вызов calculateTotalPrice(12, 70) возвращает 840
// Вызов функции со случайными, но валидными аргументами, возвращает правильное значение

// // --------------------===================== Result --------------------=====================
// function calculateTotalPrice(orderedQuantity, pricePerItem) {
//     const totalPrice = orderedQuantity * pricePerItem;
//     return totalPrice;
// };

// ###########################################################################################################################################################

// // ==========================================Task-12
// ЗАДАЧА: ЗАКАЗ ПРОДУКТА 2.0

// //  --------------------===================== Сonditions --------------------=====================
// Функция makeOrderMessage(orderedQuantity, pricePerDroid, deliveryFee) составляет и возвращает сообщение о покупке ремонтных дроидов.
// Она объявляет три параметра, значения которых будут задаваться во время её вызова.

//     orderedQuantity - количество дроидов в заказе
//     pricePerDroid - цена одного дроида
// deliveryFee - стоимость доставки
// Дополни код функции так, чтобы она возвращала сообщение о заказе в формате
// "You ordered droids worth <total price> credits. Delivery (<delivery fee> credits) is included in total price.".
// Не забудь о цене доставки при вычислениях общей стоимости.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция makeOrderMessage(orderedQuantity, pricePerDroid, deliveryFee)
// Вызов makeOrderMessage(2, 100, 50) возвращает "You ordered droids worth 250 credits. Delivery (50 credits) is included in total price."
// Вызов makeOrderMessage(4, 300, 100) возвращает "You ordered droids worth 1300 credits. Delivery (100 credits) is included in total price."
// Вызов makeOrderMessage(10, 70, 200) возвращает "You ordered droids worth 900 credits. Delivery (200 credits) is included in total price."

// // --------------------===================== Result --------------------=====================
// function makeOrderMessage(orderedQuantity, pricePerDroid, deliveryFee) {
//     const totalPrice = (orderedQuantity * pricePerDroid) + deliveryFee;
//     const message = `You ordered droids worth ${totalPrice} credits. Delivery (${deliveryFee} credits) is included in total price.`
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-13
// ОПЕРАТОРЫ СРАВНЕНИЯ >, >=, < И <=
// Используются для сравнения двух значений.Результатом своего выполнения возвращают буль - true или false, то есть «да» или «нет».

//      > - больше
//      < - меньше
//      >= - больше или равно
//      <= - меньше или равно
//      const a = 2;
//      const b = 5;

// console.log(a > b); // false
// console.log(b > a); // true
// console.log(a >= b); // false
// console.log(b >= a); // true

// console.log(a < b); // true
// console.log(b < a); // false
// console.log(a <= b); // true
// console.log(b <= a); // false

// //  --------------------===================== Сonditions --------------------=====================
// Функция isAdult объявляет один параметр age(возраст), значение которого будет задаваться во время её вызова.
// Присвой переменной passed выражение проверки возраста пользователя на совершеннолетие.Человек считается совершеннолетним в возрасте 18 лет и старше.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция isAdult(age)
// В выражении проверки используется оператор >=
// Вызов isAdult(20) возвращает true
// Вызов isAdult(14) возвращает false
// Вызов isAdult(8) возвращает false
// Вызов isAdult(37) возвращает true

// // --------------------===================== Result --------------------=====================
// function isAdult(age) {
//     const passed = age >= 18;
//     console.log("isAdult(20)");
//     console.log("isAdult(14)");
//     console.log("isAdult(8)");
//     console.log("isAdult(37)");
//     return passed;
// }

// ###########################################################################################################################################################

// // ==========================================Task-14
// ОПЕРАТОРЫ СРАВНЕНИЯ === И !==
//     «Нестрогие» операторы == и != выполняют преобразование типов сравниваемых значений, что может привести к ошибкам, особенно у начинающих.

//     // ❌ Плохо, выполняется приведение типов
//     console.log(5 == "5"); // true
// console.log(5 != "5"); // false
// console.log(1 == true); // true
// console.log(1 != true); // false
// Поэтому для проверки равенства или неравенства двух значений используются операторы === (строгое равенство) и !== (строгое неравенство),
// которые не выполняют приведение типов операндов.

//     // ✅ Хорошо, приведение типов не выполняется
//     console.log(5 === "5"); // false
// console.log(5 === 5); // true
// console.log(5 !== "5"); // true
// console.log(5 !== 5); // false
// console.log(1 === true); // false
// console.log(1 !== true); // true

// //  --------------------===================== Сonditions --------------------=====================
// Функция isValidPassword(password) проверяет равенство сохранённого и введённого паролей и возвращает результат проверки - буль true или false.
// Переменная SAVED_PASSWORD хранит значение ранее сохраненного пароля.Введённый пароль передаётся в параметр password.
// Присвой переменной isMatch выражение проверки равенства введённого и сохранённого ранее паролей.
// Результатом выражения проверки должно быть true, если значения совпадают, и false, если нет.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция isValidPassword(password)
// В выражении проверки паролей использован оператор ===
// Вызов isValidPassword("mangodab3st") возвращает false
// Вызов isValidPassword("kiwirul3z") возвращает false
// Вызов isValidPassword("jqueryismyjam") возвращает true

// // --------------------===================== Result --------------------=====================
// function isValidPassword(password) {
//     const SAVED_PASSWORD = 'jqueryismyjam';
//     const isMatch = password === 'jqueryismyjam';
//     return isMatch;
// }

// ###########################################################################################################################################################

// // ==========================================Task-15
// ИНСТРУКЦИЯ IF...ELSE
// Ветвления используются для выполнения различного кода в зависимсти от условия.
// Принцип работы простой - результат выражения в условии блока if приводится к булю true или false.

//     if(условие) {
//     // тело if
// } else {
//     // тело else
// }
// Если условие приводится к true, то выполняется код в фигурных скобках тела if, а блок else игнорируется.

// let cost;
// const subscription = "pro";
// if (subscription === "pro") {
//     cost = 100;
// } else {
//     cost = 0;
// }

// console.log(cost); // 100
// Если условие приводится к false, код блока if будет пропущен, и выполнится код в фигурных скобках после блока else.

// let cost;
// const subscription = "free";
// if (subscription === "pro") {
//     cost = 100;
// } else {
//     cost = 0;
// }
// console.log(cost); // 0

// //  --------------------===================== Сonditions --------------------=====================
// Добавь выражение проверки совершеннолетия пользователя, значения параметра age, в условие для инструкции if.
// Если пользователь совершеннолетний, должен выполняться блок if и в переменную message записывается строка "You are an adult".
// В противном случае должен выполняться блок else и записывается строка "You are a minor".

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkAge(age).
// В выражении проверки возраста использован оператор >=
// Вызов checkAge(20) возвращает "You are an adult"
// Вызов checkAge(8) возвращает "You are a minor"
// Вызов checkAge(14) возвращает "You are a minor"
// Вызов checkAge(38) возвращает "You are an adult"

// // --------------------===================== Result --------------------=====================
// function checkAge(age) {
//     let message;
//     if (age >= 18) {
//         message = 'You are an adult';
//     } else {
//         message = 'You are a minor';
//     }
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-16
// ЗАДАЧА: СКЛАД ТОВАРОВ

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkStorage(available, ordered) проверяет возможность оформления заказа и возвращает сообщение о результате.
// Она объявляет два параметра, значения которых будут задаваться во время её вызова:

// available - общее количество товаров на складе
// ordered - единиц товара в заказе
// Используя ветвления дополни код функции так, что:

// Если в заказе указано число, превышающее количество товаров на складе, в переменную message записывается строка "Not enough goods in stock!".
// В противном случае записывается строка "Order is processed, our manager will contact you.".

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkStorage(available, ordered).
// Вызов checkStorage(100, 50) возвращает "Order is processed, our manager will contact you."
// Вызов checkStorage(100, 130) возвращает "Not enough goods in stock!"
// Вызов checkStorage(200, 20) возвращает "Order is processed, our manager will contact you."
// Вызов checkStorage(200, 150) возвращает "Order is processed, our manager will contact you."
// Вызов checkStorage(150, 180) возвращает "Not enough goods in stock!"

// // --------------------===================== Result --------------------=====================
// function checkStorage(available, ordered) {
//     let message;
//     if (available <= ordered) {
//         message = "Not enough goods in stock!";
//     } else {
//         message = "Order is processed, our manager will contact you.";
//     }
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-17
// КОМБИНИРОВАННЫЙ ОПЕРАТОР ПРИСВОЕНИЯ
// Комбинированные операторы это более краткий способ присвоить переменной новое значение основываясь на её предыдущем значении.
// Будем увеличивать значение переменной age на единицу от предыдущего, имитируя обновление возраста после дня рождения пользователя.

// let age = 25;
// // Классическая запись
// age = age + 1;
// console.log(age); // 26
// Сначала выполняется правая часть выражения.Вместо age подставляется 25, выполняется операция сложения и в переменную age записывается 26.
// Выполним рефакторинг операции обновления возраста, используя комбинированный оператор присвоения с добавлением.

// let age = 25;
// // Просто более краткая запись, работает также
// age += 1;
// console.log(age); // 26

// //  --------------------===================== Сonditions --------------------=====================
// Замени выражения со стандартными математеческими операторами на комбинированный оператор присвоения с добавлением, вычитанием, умножением и делением.

// //  --------------------===================== Test --------------------=====================
//      Значение переменной a равно 7
// Использован оператор +=
//      Значение переменной b равно 6
// Использован оператор -=
//      Значение переменной c равно 45
// Использован оператор *=
//      Значение переменной d равно 2
// Использован оператор /=

// // --------------------===================== Result --------------------=====================
// let a = 5;
// let b = 10;
// let c = 15;
// let d = 20;

// a += a = 2; //7
// b -= b = 4; //6
// c *= c = 3; //45
// d /= d = 10; //2

// ###########################################################################################################################################################

// // ==========================================Task-18
// ЗАДАЧА: ПРОВЕРКА БАЛАНСА

// //  --------------------===================== Сonditions --------------------=====================
// Станция по продаже ремонтных дроидов готова к запуску, осталось написать программное обеспечение для отдела продаж.

// Функция makeTransaction(pricePerDroid, orderedQuantity, customerCredits) выполняет транзакцию по продаже дроидов и возвращает сообщение о результате операции.
// Она объявляет три параметра, значения которых будут задаваться во время её вызова:

// pricePerDroid - цена одного дроида
// orderedQuantity - кол - во заказанных дроидов
// customerCredits - сумма средств на счету клиента
// Дополни её следующим функционалом:

// Объяви переменную totalPrice для хранения общей суммы заказа и присвой ей выражение расчёта этой суммы.
// Добавь проверку сможет ли клиент оплатить заказ:
// если сумма к оплате превышает количество кредитов на счету клиента, запиши в переменную message строку "Insufficient funds!";
// в противном случае, вычти сумму покупки со счёта клиента и запиши в переменную message сообщение: "You ordered <число> droids, you have <число> credits left".

// //  --------------------===================== Test --------------------=====================
// Объявлена функция makeTransaction(pricePerDroid, orderedQuantity, customerCredits)
// Вызов makeTransaction(3000, 5, 23000) возвращает "You ordered 5 droids, you have 8000 credits left"
// Вызов makeTransaction(1000, 3, 15000) возвращает "You ordered 3 droids, you have 12000 credits left"
// Вызов makeTransaction(5000, 10, 8000) возвращает "Insufficient funds!"
// Вызов makeTransaction(2000, 8, 10000) возвращает "Insufficient funds!"
// Вызов makeTransaction(500, 10, 5000) возвращает "You ordered 10 droids, you have 0 credits left"

// // --------------------===================== Result --------------------=====================
// function makeTransaction(pricePerDroid, orderedQuantity, customerCredits) {
//     let message;
//     const totalPrice = pricePerDroid * orderedQuantity;
//     if (totalPrice <= customerCredits) {
//         message = `You ordered ${orderedQuantity} droids, you have ${customerCredits - totalPrice} credits left`;
//     } else {
//         message = "Insufficient funds!";
//     }
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-19
// БЛОК ELSE...IF
// Конструкция if...else может проверить и среагировать на выполнение или невыполнение только одного условия.

// let cost;
// const subscription = "pro";
// if (subscription === "pro") {
//     cost = 100;
// } else {
//     cost = 0;
// }

// console.log(cost); // 100
// Блок else...if позволяет добавить после else еще один оператор if с условием.
// В конце цепочки может быть классический блок else, который выполнится только в случае, когда ни одно из условий не приведётся к true.

// let cost;
// const subscription = "premium";
// if (subscription === "free") {
//     cost = 0;
// } else if (subscription === "pro") {
//     cost = 100;
// } else if (subscription === "premium") {
//     cost = 500;
// } else {
//     console.log(`Invalid subscription type - ${subscription}`);
// }

// console.log(cost); // 500
// При первом же удовлетворяющем условии проверки прекратятся и выполнится только тело соответствующего блока if.
// Поэтому подобную запись следует читать как: «ищу первое выполнение условия, игнорирую всё остальное».

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkPassword(password) получает пароль пользователя в параметр password,
// проверяет его на совпадение с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение
// о результате сравнения, хранящееся в переменной message.
// Если значение параметра password равно null, значит пользователь отменил операцию и в message записывается строка "Canceled by user!".
// Если значение параметра password совпадает со значением ADMIN_PASSWORD, в переменную message присваивается строка "Welcome!".
// Если ни одно из предыдущих условий не выполнилось, в переменную message записывается строка "Access denied, wrong password!".

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkPassword(password)
// Вызов checkPassword("mangohackzor") возвращает "Access denied, wrong password!"
// Вызов checkPassword(null) возвращает "Canceled by user!"
// Вызов checkPassword("polyhax") возвращает "Access denied, wrong password!"
// Вызов checkPassword("jqueryismyjam") возвращает "Welcome!"

// // --------------------===================== Result --------------------=====================
// function checkPassword(password) {
//     const ADMIN_PASSWORD = 'jqueryismyjam';
//     let message;
//     if (password === null) {
//         message = 'Canceled by user!';
//     } else if (password === ADMIN_PASSWORD) {
//         message = 'Welcome!';
//     } else {
//         message = 'Access denied, wrong password!';
//     }
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-20
// ЗАДАЧА: СКЛАД ТОВАРОВ 2.0

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkStorage(available, ordered) проверяет возможность оформления заказа и возвращает сообщение о результате.
// Она объявляет два параметра, значения которых будут задаваться во время её вызова.
//     available - доступное количество товаров на складе
//     ordered - единиц товара в заказе
// Используя ветвления дополни код функции так, что:
// Если в заказе еще нет товаров, то есть значение параметра ordered равно 0, в переменную message присваивается строка "There are no products in the order!".
// Eсли товаров в заказе больше чем доступно товаров на складе, то в переменную message присваивается строка
// "Your order is too large, there are not enough items in stock!".
// В противном случае в переменную message присваевается строка "The order is accepted, our manager will contact you".

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkStorage(available, ordered)
// Вызов checkStorage(100, 50) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(100, 130) возвращает "Your order is too large, there are not enough items in stock!"
// Вызов checkStorage(70, 0)возвращает "There are no products in the order!"
// Вызов checkStorage(200, 20) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(200, 250) возвращает "Your order is too large, there are not enough items in stock!"
// Вызов checkStorage(150, 0) возвращает "There are no products in the order!"

// // --------------------===================== Result --------------------=====================
// function checkStorage(available, ordered) {
//     let message;
//     if (ordered === 0) {
//         message = "There are no products in the order!";
//     } else if (ordered >= available) {
//         message = "Your order is too large, there are not enough items in stock!";
//     } else {
//         message = "The order is accepted, our manager will contact you";
//     }
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-21
// ЛОГИЧЕСКОЕ «И» (ОПЕРАТОР &&)
// Логические операторы используются для проверки условий с множественными выражениями, например в ветвлениях.
// Оператор && приводит все операнды к булю и возвращает значение одного из них.
// Левый операнд, если его можно привести к false, и правый в остальных случаях.

// выражение && выражение
// В следующем примере оба условия вернут true, поэтому результатом всего выражения будет true - вернётся значение правого операнда.

// const age = 20;
// console.log(age > 10 && age < 30); // true && true -> true
// Если хотя бы один из операндов будет приведён к false, результатом выражения будет этот операнд.

// const age = 50;
// console.log(age > 10 && age < 30); // true && false -> false
// console.log(age > 80 && age < 120); // false && true -> false
// То есть логическое «И» запинается на лжи и возвращает то, на чём запнулось или последний операнд.

// console.log(true && false); // false
// console.log(false && true); // false
// console.log(true && true); // true

// console.log(3 && false); // false
// console.log(false && 3); // false
// console.log(3 && true); // true
// console.log(true && 3); // 3
// Полезно
// Запомните шесть значений, которые в булевом преобразовании приводятся к `false`: `0`, `NaN`, `null`, `undefined`,
// пустая строка `""` или `''` и само значение`false`
// Абсолютно всё остальное приводится к`true`.

// console.log(1 && 5); // true && true -> 5
// console.log(5 && 1); // true && true -> 1
// console.log(0 && 2); // false && true -> 0
// console.log(2 && 0); // true && false -> 0
// console.log("" && "Mango"); // false && true -> ''
// console.log("Mango" && ""); // true && false -> ''
// console.log("Mango" && "Poly"); // true && true -> 'Poly'
// console.log("Poly" && "Mango"); // true && true -> 'Mango'

// //  --------------------===================== Сonditions --------------------=====================
// Функция isNumberInRange(start, end, number) проверяет, входит ли число в промежуток.Она объявляет три параметра, значения которых будут задаваться во время её вызова:
// number - число, вхождение которого проверяется
// start - начало числового промежутка
// end - конец числового промежутка
// Присвой переменной isInRange выражение проверки вхождения number в числовой промеждуток от start до end.
// То есть число должно быть больше либо равно start и меньше либо равно end.
// Результатом выражения проверки будет буль true или false.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция isNumberInRange(start, end, number)
// В выражении проверки использован оператор &&
// Вызов isNumberInRange(10, 30, 17) возвращает true
// Вызов isNumberInRange(10, 30, 5) возвращает false
// Вызов isNumberInRange(20, 50, 24) возвращает true
// Вызов isNumberInRange(20, 50, 76) возвращает false

// // --------------------===================== Result --------------------=====================
// function isNumberInRange(start, end, number) {
//     const isInRange = number >= start && number <= end;
//     return isInRange;
// }

// ###########################################################################################################################################################

// // ==========================================Task-22
// ЛОГИЧЕСКОЕ «ИЛИ» (ОПЕРАТОР ||)
// Оператор || приводит все операнды к булю и возвращает значение одного из них.Левый операнд, если его можно привести к true, и правый в остальных случаях.
//     выражение || выражение
// В следующем примере условие слева вернёт true, поэтому результатом всего выражения будет true - вернётся значение первого операнда, которое было приведено к true.

// const age = 5;
// console.log(age < 10 || age > 30); // true || false -> true
// Тут результатом тоже будет true, так как хотя бы один из операндов, в этом случае правый, был приведён к true.

// const age = 40;
// console.log(age < 10 || age > 30); // false || true -> true
// А здесь ни одно из условий не выполняется, поэтому получаем false - значение последнего операнда.

// const age = 20;
// console.log(age < 10 || age > 30); // false || false -> false
// То есть логическое «ИЛИ» запинается на правде и возвращает то, на чём запнулось или последний операнд.

//     console.log(true || false); // true
// console.log(false || true); // true
// console.log(true || true); // true

// console.log(3 || false); // 3
// console.log(false || 3); // 3
// console.log(3 || true); // 3
// console.log(true || 3); // true

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkIfCanAccessContent(subType) проверяет, может ли пользователь получить доступ к контенту.
// Проверка происходит по типу подписки.Получить доступ могут только пользователи с подпиской pro или vip.
// Присвой переменной canAccessContent выражение проверки подписки.
// Если значение параметра subType равно строкам "pro" или "vip", пользователь получит доступ.Результатом выражения проверки будет буль true или false.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkIfCanAccessContent(subType)
// В выражении проверки использован оператор ||
// Вызов checkIfCanAccessContent("pro") возвращает true
// Вызов checkIfCanAccessContent("starter") возвращает false
// Вызов checkIfCanAccessContent("vip") возвращает true
// Вызов checkIfCanAccessContent("free") возвращает false

// // --------------------===================== Result --------------------=====================
// function checkIfCanAccessContent(subType) {
//     const canAccessContent = (subType === "pro" || subType === "vip");
//     return canAccessContent;
// }

// ###########################################################################################################################################################

// // ==========================================Task-23
// ЛОГИЧЕСКОЕ «НЕ» (ОПЕРАТОР!)
// Все операторы, которые мы рассматривали до этого, были бинарными.Т.е.они содержали два операнда: левый и правый.
// Логическое «НЕ» - это унарный оператор, выполняющий операцию над одним операндом справа.
// !выражение
// Оператор! приводит операнд к булю, если необходимо, а затем делает инверсию - заменяет его на противоположный true -> false или false -> true.
// console.log(!true); // false
// console.log(!false); // true
// console.log(!3); // !3 -> !true -> false
// console.log(!"Mango"); // !'Mango' -> !true -> false
// console.log(!0); // !0 -> !false -> true
// console.log(!""); // !'' -> !false -> true

// const isOnline = true;
// const isNotOnline = !isOnline; // !isOnline -> !true -> false

// //  --------------------===================== Сonditions --------------------=====================
// Функция isNumberNotInRange(start, end, number) проверяет, не входит ли число в промежуток.
// То есть число должно быть меньше либо равно start и больше либо равно end.
// Результатом выражения проверки будет буль true или false.
// Она объявляет три параметра, значения которых будут задаваться во время её вызова:
// number - число, не вхождение которого проверяется
// start - начало числового промежутка
// end - конец числового промежутка
// Присвой переменной isNotInRange выражение инверсии значения переменной isInRange используя оператор!.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция isNumberNotInRange(start, end, number)
// В выражении использован оператор!
// Вызов isNumberNotInRange(10, 30, 17) возвращает false
// Вызов isNumberNotInRange(10, 30, 5) возвращает true
// Вызов isNumberNotInRange(20, 50, 24) возвращает false
// Вызов isNumberNotInRange(20, 50, 76) возвращает true

// // --------------------===================== Result --------------------=====================
// function isNumberNotInRange(start, end, number) {
//     const isInRange = number >= start && number <= end;
//     const isNotInRange = !isInRange;
//     return isNotInRange;
// }

// ###########################################################################################################################################################

// // ==========================================Task-24
// ЗАДАЧА: РАСЧЁТ СКИДКИ

// //  --------------------===================== Сonditions --------------------=====================
// Функция getDiscount(totalSpent) определяет значение скидки в зависимости от общей суммы потраченных
// денег(параметр totalSpent) в магазине за всё время(партнёрская программа).
// Скидка записывается в переменную discount и возвращается из функции как результат её работы.
// Используя ветвления и логические операторы, дополни код функции.

// Если потрачено от 50000(включительно) или больше кредитов - скидка 10 % (золотой партнёр)
// Если потрачено от 20000(включительно) до 50000 кредитов - скидка 5 % (серебрянный партнёр)
// Если потрачено от 5000(включительно) до 20000 кредитов - скидка 2 % (бронзовый партнёр)
// Если потрачено меньше чем 5000 кредитов - скидка 0(базовый партнёр)
// Значения скидок каждого уровня хранятся в одноимённых константах BASE_DISCOUNT, BRONZE_DISCOUNT, SILVER_DISCOUNT и GOLD_DISCOUNT.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция getDiscount(totalSpent)
// Вызов getDiscount(137000) возвращает 0.1
// Вызов getDiscount(46900) возвращает 0.05
// Вызов getDiscount(8250) возвращает 0.02
// Вызов getDiscount(1300) возвращает 0
// Вызов getDiscount(5000) возвращает 0.02
// Вызов getDiscount(20000) возвращает 0.05
// Вызов getDiscount(50000) возвращает 0.1

// // --------------------===================== Result --------------------=====================
// function getDiscount(totalSpent) {
//     const BASE_DISCOUNT = 0;
//     const BRONZE_DISCOUNT = 0.02;
//     const SILVER_DISCOUNT = 0.05;
//     const GOLD_DISCOUNT = 0.1;
//     let discount;
//     if (totalSpent >= 50000) {
//         discount = GOLD_DISCOUNT;
//     } else if (totalSpent >= 20000) {
//         discount = SILVER_DISCOUNT;
//     } else if (totalSpent >= 5000 && totalSpent < 20000) {
//         discount = BRONZE_DISCOUNT;
//     } else if (totalSpent < 5000) {
//         discount = BASE_DISCOUNT;
//     }
//     return discount;
// }

// ###########################################################################################################################################################

// // ==========================================Task-25
// ТЕРНАРНЫЙ ОПЕРАТОР
// Тернарный оператор используется как более синтаксически краткая замена инструкции if...else,
// когда одной и той же переменной необходимо присвоить разные значения по условию.
// <условие> ? <выражение если условие истинно> : <выражение если условие ложно>
// Работает по такой схеме:
// Вычисляется условие.
// Если условие истинно, то есть приводится к true, вычисляется выражение после ?.
// Если условие ложно, то есть приводится к false, вычисляется выражение после :.
// Значение вычисленного выражения возвращается как результат работы тернарного оператора.
// let type;
// const age = 20;

// if (age >= 18) {
//     type = "adult";
// } else {
//     type = "child";
// }

// console.log(type); // "adult"
// Выполним рефакторинг, заменив if...else тернарным оператором.

// const age = 20;
// const type = age >= 18 ? "adult" : "child";
// console.log(type); // "adult"
// Внимание
// Тернарный оператор должен использоваться в простых операциях присваивания или возврата.
// Применять его для замены сложных ветвлений — плохая практика (антипаттерн).

// //  --------------------===================== Сonditions --------------------=====================
// Выполни рефакторинг решения задачи «Склад товаров», заменив инструкцию if...else тернарным оператором.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkStorage(available, ordered).
// Использован тернарный оператор.
// Вызов checkStorage(100, 50) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(100, 130) возвращает "Not enough goods in stock!"
// Вызов checkStorage(200, 20) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(200, 150) возвращает "The order is accepted, our manager will contact you"
// Вызов checkStorage(150, 180) возвращает "Not enough goods in stock!"

// // --------------------===================== Result --------------------=====================
// function checkStorage(available, ordered) {
//     let message;
//     // if (ordered > available) {
//     //   message = "Not enough goods in stock!";
//     // } else {
//     //   message = "The order is accepted, our manager will contact you";
//     // }

//     Change code above this line
//     message = ordered > available ? "Not enough goods in stock!" : "The order is accepted, our manager will contact you";
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-26
// ЗАДАЧА: ПРОВЕРКА ПАРОЛЯ

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkPassword(password) сравнивает переданный ей пароль(параметр password) с сохранённым паролем
// администратора(константа ADMIN_PASSWORD) и возвращает строку с сообщением о результате.
// Используя тернарный оператор дополни функцию так, что:
// Если значения password и ADMIN_PASSWORD совпадают, присвой переменной message строку "Access is allowed".
// В противном случае, присвой message строку "Access denied, wrong password!".

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkPassword(password)
// Использован тернарный оператор
// Вызов checkPassword("jqueryismyjam") возвращает "Access is allowed"
// Вызов checkPassword("angul4r1sl1f3") возвращает "Access denied, wrong password!"
// Вызов checkPassword("r3actsux") возвращает "Access denied, wrong password!"

// // --------------------===================== Result --------------------=====================
// function checkPassword(password) {
//     const ADMIN_PASSWORD = "jqueryismyjam";
//     let message;
//     message = password === ADMIN_PASSWORD ? "Access is allowed" : "Access denied, wrong password!";
//     return message;
// }

// ###########################################################################################################################################################

// // ==========================================Task-27
// ИНСТРУКЦИЯ SWITCH
// В некоторых случаях неудобство чтения сложных ветвлений if...else можно избежать,
// используя более «плоский» синтаксис инструкции ветвления switch.
// Область применения switch ограничена задачами с одним общим вопросом(что сравнивать)
// и множеством вариантов ответов(с чем сравнивать).

//     switch(значение) {
//   case значение:
//     инструкции;
//     break;

//   case значение:
//     инструкции;
//     break;
// }
// Его синтаксис состоит из блока switch (значение) - что нужно сравнить и множества отдельных случаев case
// значение: - с чем нужно сравнить.Для сравнения используется оператор строгого равенства ===.
// То есть нельзя сравнить на больше или меньше, только на равенство.
// Значение в блоке switch (значение) - строка или число, которое сравнивается на строгое равенство со всеми
// значениями в блоках case значение: по порядку, сверху вниз.
// Оператор break в завершении каждого блока case необходим, чтобы прервать дальнейшие проверки и сразу перейти к коду
// за switch в том случае, когда проверка на равенство вернула true.

// //  --------------------===================== Сonditions --------------------=====================
// Функция getSubscriptionPrice(type) получает строку с типом подписки пользователя(параметр type),
// проверяет её на совпадение с тремя возможными типами ежемесячной подписки и возвращает цену хранящуюся в переменной price.

// Если значение параметра type это строка:

// "starter" - цена подписки 0 кредитов.
// "professional" - цена подписки 20 кредитов.
// "organization" - цена подписки 50 кредитов.
// Изначально в теле функции была инструкция if...else, которая выглядела вот так.

//     if(type === "starter") {
//     price = 0;
// } else if (type === "professional") {
//     price = 20;
// } else if (type === "organization") {
//     price = 50;
// }
// После рефакторинга инструкция if..else была заменена на switch.
// Дополни код инструкции switch, чтобы функция работала правильно.

// //  --------------------===================== Test --------------------=====================
// Объявлена функция getSubscriptionPrice(type)
// Вызов getSubscriptionPrice("professional") возвращает число 20
// Вызов getSubscriptionPrice("organization") возвращает число 50
// Вызов getSubscriptionPrice("starter") возвращает число 0

// // --------------------===================== Result --------------------=====================
// function getSubscriptionPrice(type) {
//     let price;
//     switch (type) {
//         case "starter":
//             price = 0;
//             break;

//         case "professional":
//             price = 20;
//             break;

//         case "organization":
//             price = 50;
//             break;
//     }
//     return price;
// }

// ###########################################################################################################################################################

// // ==========================================Task-28
// ИНСТРУКЦИЯ SWITCH C БЛОКОМ DEFAULT
// Если ни одного совпадения значений не произошло, необходимо выполнить код по умолчанию, как в блоке else для инструкции if...else.
// Для этого после всех блоков case добавляется блок default.
// switch (значение) {
//     case значение:
//         инструкции;
//         break;

//     case значение:
//         инструкции;
//         break;

//     default:
//         инструкции;
// }
// Оператор break после блока default не нужен, так как это и так последнее что будет выполнено в switch и управление будет передано коду за ним.

// //  --------------------===================== Сonditions --------------------=====================
// Функция checkPassword(password) получает пароль в параметр password, проверяет его на совпадение
// с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения,
// хранящееся в переменной message.
// Если значение параметра password:
// равно null, значит пользователь отменил операцию и в message записывается строка "Canceled by user!".
// совпадает со значением ADMIN_PASSWORD, в переменную message присваивается строка "Welcome!".
// не удобвлетворяет ни одному из предыдущих условий, в переменную message записывается строка "Access denied, wrong password!".
// Проведи рефакторинг кода, заменив инструкцию if..else на switch, и не забудь о блоке default (аналог else).

// //  --------------------===================== Test --------------------=====================
// Объявлена функция checkPassword(password)
// Вызов checkPassword("mangohackzor") возвращает "Access denied, wrong password!"
// Вызов checkPassword(null) возвращает "Canceled by user!"
// Вызов checkPassword("polyhax") возвращает "Access denied, wrong password!"
// Вызов checkPassword('"jqueryismyjam") возвращает "Welcome!"

// // --------------------===================== Result --------------------=====================
function checkPassword(password) {
    const ADMIN_PASSWORD = "jqueryismyjam";
    let message;
    // Change code below this line

    switch (password) {

        case ADMIN_PASSWORD:
            message = "Welcome!";
            break;

        case null:
            message = "Canceled by user!";
            break;

        default:
            message = "Access denied, wrong password!";
    }

    // Change code above this line
    return message;
}



































// ###########################################################################################################################################################

// // ==========================================Task-

// //  --------------------===================== Сonditions --------------------=====================

// //  --------------------===================== Test --------------------=====================

// // --------------------===================== Result --------------------=====================










