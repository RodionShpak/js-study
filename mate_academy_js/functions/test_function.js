// ###########################################################################################################################################################

// // ==========================================Task-1

// Що буде результатом виконання цього коду ?
//     function getProduct(a, b) {
//         return a * b;
//     }

// getProduct(5, 3);

// 15 буде повернено           V

// Нічого, оскільки функція не викликається

// 15 буде надруковано в консолі

// Пояснення правильного варіанту:
// Правильний варіант:
// У коді ми викликали функцію з аргументами(5, 3), тоді під час виконання коду:
// аргумент a дорівнюватиме 5
// аргумент b дорівнюватиме 3
// а якщо 5 * 3 отримаємо 15
// Ключове слово 'return' використовується для повернення значення з функції.Тому функція поверне 15.

// Щоб інші варіанти працювали, треба було б інакше написати код.

//     Наприклад, щоб 15 було надруковано у консолі.
// У функції потрібно було б додати команду для друку в консолі і видалити return
// (тоді функція не передавала в місце, де її викликали результат своєї роботи). І сам код виглядав би так:
// function getProduct(a, b) {
//     console.log(a * b);
// }
// getProduct(5, 3);

// А щоб нічого не сталося, оскільки функція не викликається.
// Треба було не викликати функцію.Код виглядав би так:
// function getProduct(a, b) {
//     return a * b;
// }

// ###########################################################################################################################################################

// // ==========================================Task-2

// Яке ключове слово використовується, щоб повернути значення з функції ?

// send

// get

// show

// return              V

// Пояснення правильного варіанту:
// Оператор return завершує виконання поточної функції та повертає її значення.

// При виклику оператора return функції її виконання припиняється.Вказане значення повертається до місця виклику функції.
// Наприклад, наведена нижче функція повертає суму переданих до неї аргументів x, y.
// Під час виклику ми передаємо число 3 для зберігання в аргументі x і число 5 для зберігання в аргументі y.

// function sum(x, y) {
//     return x + y;
// }
// let demo = sum(3, 5); //викликаємо функцію, та її результат записуємо в змінну demo. Значення demo дорівнюватиме 8.

// ⛔ Інші варіанти відповідей неправильні, тому що у програмуванні немає ключових слів get, show, send.

// ###########################################################################################################################################################

// // ==========================================Task-3

// Що буде результатом виконання цього коду ?
//     function sayBye() {
//         console.log('Goodbye!');
//     }

// sayBye();

// 'Goodbye!' буде повернено

// 'Goodbye!' буде надруковано в консолі               V

// Нічого, оскільки функція не викликається

// Пояснення правильного варіанту:
// Правильний варіант:
// Повідомлення 'Goodbye!' буде надруковано в консолі після виклику функції sayBye().
// Команда console.log(), яка використовується в цій функції, друкує аргумент у консоль.
// Щоб інші варіанти працювали, треба було б інакше написати код.

//     Наприклад, щоб нічого не сталося, оскільки функція не викликається.
// У коді потрібно було б видалити виклик функції і сам код виглядав би так:
// function sayBye() {
//     console.log('Goodbye!');
// }
// А щоб 'Goodbye!' було повернено.
// Потрібно було не лише викликати функцію.Але і в функції всередині прописати команду return, яка говорить про те,
// що функція не тільки щось виконує, але і результат своєї роботи повертає в те місце, з якого функцію викликали.Код виглядав би так:
// function sayBye() {
//     return 'Goodbye!';
// }
// sayBye();

// ###########################################################################################################################################################

// // ==========================================Task-4

// Що буде результатом виконання цього коду ?
//     function startCoding() {
//         console.log('I am starting to code!');
//     }

// 'I am starting to code!' буде надруковано в консолі

// Нічого, оскільки функція не викликається                    V

// 'I am starting to code!' буде повернено

// Пояснення правильного варіанту:
// Правильний варіант:
// У цьому коді функція не викликається, тому консолі нічого не виводиться.

// Щоб інші варіанти працювали, треба було б інакше написати код.

//     Наприклад, щоб 'I am starting to code!' був надрукований у консолі.
// Функцію потрібно викликати командою startCoding(); тільки після виклику функції виконуються команди всередині функції.
// І сам код виглядав би так:
// function startCoding() {
//     console.log('I am starting to code!');
// }
// startCoding();

// А щоб 'I am starting to code!' було повернено.
// Потрібно було не лише викликати функцію.Але і в функції всередині прописати команду return,
// яка говорить про те, що функція не тільки щось виконує, але і результат своєї роботи повертає в те місце, з якого функцію викликали.
// Код виглядав би так:
// function startCoding() {
//     return 'I am starting to code!';
// }
// startCoding();

// ###########################################################################################################################################################

// // ==========================================Task-5

// Як оголосити функцію 'getTitle', яка приймає параметр 'title' ?

//     function getTitle(title) { code... }                 V

// function = getTitle(title) { code... }

// function = getTitle('title') { code... }

// function getTitle('title') { code... }

// Пояснення правильного варіанту:
// Функція - це невеликий фрагмент коду з ім'ям, який можна багаторазово викликати в програмі,
// передаючи в неї параметри(аргументи) і отримуючи від функції результат.
// Функція позбавляє нас необхідності писати той самий код кілька разів.

// Правильне оголошення функції виглядає так:
// function ім'яФункції() {
//   // тіло функції
// }

// У тесті вище ти бачиш:
// function – команда за якою програма розуміє, що зараз створюємо функцію.
//     getTitle – це ім'я функції. Ім'я може бути будь - яким і як саме назвати функцію вирішує програміст.
// Бажано називати функцію так, щоб за назвою було зрозуміло, що саме вона робить.
// (title) – усередині дужок через кому може зберігатися те, що ми захочемо передати у функцію до роботи.
// Наприклад, якщо ти хочеш, щоб функція приймала будь - який заголовок із зовнішньої програми,
// то тобі його потрібно передати у функцію та зберегти у змінній(аргументі) title.
// Можеш залишати дужки порожніми, якщо не потрібно, щоб функція працювала зі змінними, які є в інших частинах програми.
// { соde... } – між фігурними дужками пиши будь - які команди, які хочеш, щоб функція виконувала.

// ⛔ Інші варіанти відповідей неправильні, тому що:
// Знак `=` не можна писати між командою 'function' та ім'ям функції.

// title пишеться без лапок, оскільки це назва аргументу, у якому може зберігатися будь - яке значення,
// яке ми передаємо з інших частин програми.Якщо написати('title'), тоді слово title вже не змінна, у яку можна записати щось,
// а рядок(просто текст) 'title'.

// ###########################################################################################################################################################

// // ==========================================Task-6

// Що буде результатом виконання цього коду ?
//     function welcomeGuest(guestName) {
//         return `Welcome, ${guestName}!`;
//     }

// welcomeGuest('David');

// 'Welcome, $guestName!' буде повернено

// 'Welcome, $David'! буде повернено

// 'Welcome, David!' буде повернено                    V

// 'Welcome, guestName!' буде повернено

// Пояснення правильного варіанту:
// Правильний варіант:
// Синтаксис `Welcome, ${guestName}!` використовується для передачі значення змінної 'guestName' у рядок.
// Якщо guestName = 'David', рядок в результаті буде мати вигляд 'Welcome, David!' без знака $.
// Знаки ${ } ми використовуємо в коді, щоб відобразити саме змінну всередені.

// Щоб інші варіанти працювали, треба було б інакше написати код.

//     Наприклад, щоб 'Welcome, $guestName!' було повернено.
// У функції потрібно було видалити { } у рядку з return, де повертаємо рядок.
// Саме команда ${ } дає можливість звертатися до значення змінної.
// І сам код виглядав би так:
// function welcomeGuest(guestName) {
//     return `Welcome, $guestName!`;
// }
// welcomeGuest('David');

// Щоб 'Welcome, guestName!' було повернено.
// У функції потрібно було видалити ${ } у рядку з return, де повертаємо рядок.
// Саме команда ${ } дає можливість звертатися до значення змінної.
// І сам код виглядав би так:
// function welcomeGuest(guestName) {
//     return `Welcome, guestName!`;
// }
// welcomeGuest('David');

// Щоб 'Welcome, $David!' було повернено.
// У функції потрібно було поставити ще один $ перед командою ${ } у рядку з return.
// Сам $ не є жодною командою і вважався б просто символом, який потрібно надрукувати.
// І сам код виглядав би так:
// function welcomeGuest(guestName) {
//     return `Welcome, $${guestName}!`;
// }
// welcomeGuest('David');

// ###########################################################################################################################################################

// // ==========================================Task-7

// Як оголосити функцію з іменем 'myFunction' ?

// function = myFunction() { code... }

// function = myFunction{ } (code... )

// function myFunction() { code... }                V

// function myFunction{ } (code... )

// Пояснення правильного варіанту:
// Функція - це невеликий фрагмент коду з ім'ям, який можна багаторазово викликати в програмі,
// передаючи в неї параметри(аргументи) і отримуючи від функції результат.
// Функція позбавляє нас необхідності писати той самий код кілька разів.

// Наприклад:
// function sayHello(personName) {
//     console.log(`Hello, ${personName}`)!
// }
// sayHello(Ivan);
// Тут ми створили функцію, яка називається 'sayHello', в неї передаємо з інших частин програми значення параметра personName,
//     щоб функція знала, що саме друкувати.І далі написана команда, щоб програма друкувала 'Hello, Ivan'.

// Правильне оголошення функції виглядає так:
// function ім'яФункції() {
//   // тіло функції
// }

// У тесті вище ти бачиш:
// function – команда, за якою програма розуміє, що зараз створюється функція.
//     myFunction – це ім'я функції. Ім'я може бути будь - яким і як саме назвати функцію вирішує програміст.
//     Бажано називати функцію так, щоб за назвою було зрозуміло, що саме вона робить.
// () – усередині дужок через кому може зберігатися те, що ми захочемо передати у функцію для роботи.Наприклад,
//     якщо ти хочеш, щоб функція рахувала суму двох чисел і друкувала їх на екрані,
//     то тобі потрібно ці дві числа передати в функцію, інакше вона не знатиме, що саме їй потрібно друкувати.
//         Можеш залишати дужки порожніми, якщо не потрібно, щоб функція працювала зі змінними, які в тебе є в інших частинах програми.
// { соde... } – між фігурними дужками пиши будь - які команди, які хочеш, щоб функція виконувала.

// ⛔ Інші варіанти відповідей неправильні, тому що:
// Знак `=` не можна писати між командою 'function' та ім'ям функції.

// ###########################################################################################################################################################

// // ==========================================Task-8

// Що буде результатом виконання цього коду ?
//     function getSquare(a) {
//         return a * a;

//         console.log(`Square is ${a * a}`);
//     }

// getSquare(8);

// 'Square is 64' буде надруковано в консолі

// 64 буде повернено                        V

// 64 буде повернено, 'Square is 64' буде надруковано в консолі

// Пояснення правильного варіанту:
// Правильний варіант:
// 'return' завершує виконання функції, і наступні команди НЕ виконуються.
// Тобто для функції слово 'return' означає, що це кінець функції і зараз вона виконає останню свою дію.
// Тому важливо писати 'return' тільки після всіх команд, які потрібно, щоб обов'язково функція виконала.
// Таким чином, встигне виконатися тільки вираз у return і 64 буде повернено, а 'console.log(`Square is ${a * a}`)'
//  не буде виконуватись і 'Square is 64' НЕ буде надруковано в консолі.

// Щоб інші варіанти працювали, треба було б інакше написати код.

//     Наприклад, щоб 64 було повернено, і 'Square is 64' було надруковано у консолі.
// У функції потрібно було команду 'return' перенести до кінця функції, щоб команда друку в консолі встигла спрацювати.
// І сам код виглядав би так:
// function getSquare(a) {
//     console.log(`Square is ${a * a}`);
//     return a * a;
// }
// getSquare(8);

// Щоб 'Square is 64' було надруковано у консолі.
// У функції потрібно було видалити команду 'return', і тоді функція нічого не повертала б.І сам код виглядав би так:
// function getSquare(a) {
//     console.log(`Square is ${a * a}`);
// }
// getSquare(8);

// ###########################################################################################################################################################

// // ==========================================Task-9

// --------------------===================== Conditions --------------------=====================

// Оголоси функцію myFunction.Використай ключове слово function.

// Приклад:

// function example() { }

// --------------------===================== Result --------------------=====================
// function myFunction() { }

// ###########################################################################################################################################################

// // ==========================================Task-10

// --------------------===================== Conditions --------------------=====================

// Оголоси функцію з назвою hello, використовуючи ключове слово function.
// Всередині функції зроби виклик console.log з аргументом 'Hello, world!'

// --------------------===================== Result --------------------=====================

// function hello() {
//     console.log('Hello, world!');
// } }

// ###########################################################################################################################################################

// ==========================================Task-11

// --------------------===================== Conditions --------------------=====================

// Оголоси функцію getString, яка не приймає ніяких параметрів.

// Всередині функції getString:

// оголоси змінну greeting, використовуючи ключове слово const, присвой їй значення - рядок 'Hello, Mate Academy!'.
// поверни змінну greeting за допомогою ключового слова return.

// --------------------===================== Result --------------------=====================

// function getString() {
//     const greeting = `${'Hello, Mate Academy!'}`;
//     return greeting;
// }

// ###########################################################################################################################################################

// ==========================================Task-12

// --------------------===================== Conditions --------------------=====================

// Створи функцію greeter, яка:

// приймає параметр name;
// повертає рядок - привітання такого формату: Hi, ${ name } !(використай ключове слово return).
// Параметр name передається в тестах, тобі не потрібно оголошувати його в коді!

// Приклад:

// // Параметр: name = 'Anna'

// greeter(name) // повертає 'Hi, Anna!'
// Підказка
// Ти можеш використати інтерполяцію, записавши рядок Hi, ${ name } !у зворотних лапках.

// Як працюють тести в таких завданнях
// Параметр name передається в тестах.

//     Наприклад, якщо в тесті передається рядок 'Helen', цей тест очікує результат 'Hi, Helen!'.
//     Але якщо в іншому тесті передається рядок 'Daniel', то такий тест вже буде очікувати результат 'Hi, Daniel!'.

// Не пиши прямо 'Hi, Mike!' або 'Hi, Louis XIV!'.Використовуй параметр name, щоб отримати потрібний рядок.

// --------------------===================== Result --------------------=====================

// function greeter(name) {
//     name = `Hi, ${name}!`;
//     return name;
// }

// ###########################################################################################################################################################

// ==========================================Task-13

// --------------------===================== Conditions --------------------=====================

// Створи функцію greeter, яка:

// приймає параметри name та partOfTheDay
// повертає рядок - привітання такого формату:
// // Параметри: name = 'Paul', partOfTheDay = 'night'

// greeter(name, partOfTheDay) // повертає рядок 'Good night, Paul!'
// Параметри name та partOfTheDay передаються в тестах, тобі не потрібно оголошувати їх в коді!

// Не забудь додати кому та знак оклику.

//     Підказка
// Ти можеш використати інтерполяцію, записавши рядок Good ${ partOfTheDay }, ${ name } !у зворотних лапках.

// --------------------===================== Result --------------------=====================

// function greeter(name, partOfTheDay) {
//     return `Good ${partOfTheDay}, ${name}!`;
// }

// ###########################################################################################################################################################

// ==========================================Task-14

// --------------------===================== Conditions --------------------=====================

// Створи функцію double, яка:

// приймає параметр num;
// повертає значення num, помножене на 2.
// Приклади:

// // Параметр: num = 5
// double(num) // повертає 10

// // Параметр: num = 24
// double(num) // повертає 48

// --------------------===================== Result --------------------=====================

// function double(num) {
//     return (num * 2);
// }