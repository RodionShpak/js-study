// ###########################################################################################################################################################

// // ==========================================Task-1

// Як отримати довжину рядка, збереженого у змінній 'input' ?

//     input.charAt()

// input.toUpperCase()

// input.length                        V

// input.count

// Пояснення правильного варіанту:
// У кожного рядка є довжина(кількість символів в ньому).
// Довжина записана у властивості length.
// Відповідно, для того, аби отримати довжину рядка, нам потрібно вказати назву змінної, довжину якої ми хочемо дізнатися, та 'length'

// ###########################################################################################################################################################

// // ==========================================Task-2

// Який результат наведеного нижче коду ?
// const fruit = 'apple';

// console.log(fruit[5]);

// ''

// 'e'

// undefined                           V

// 't'

// Пояснення правильного варіанту:
// Отримати окремий символ можна за його індексом(порядковим номером), що починається з 0.
// Наш рядок 'apple' має 5 символів, але оскільки рахунок починається з індексу 0, то останній символ буде із індексом 4.
// Таким чином, ми намагаємось знайти індекс, якого не існує і тому команда 'console.log(fruit[5])' виведе undefined

// ###########################################################################################################################################################

// // ==========================================Task-3

// Який результат наведеного нижче коду ?
//     let text = 'Hello world, welcome to the universe.';
// let result = text.indexOf('welcome');

// -1

// 13                          V

// 2

// 11

// Пояснення правильного варіанту:
// Метод 'indexOf()' допомагає визначити, на якому місці стоїть літера або цілий підрядок.
// 'indexOf()' повертає індекс першого входження вказаного значення в рядок та повертає '-1', якщо значення не знайдене.
// Цей метод має два параметри: 'searchValue' та 'fromIndex'.
// 'searchValue' – це, власне, і є значення, яке ми намагаємося знайти в рядку.В нашому випадку це 'welcome'
// Пошук позиції можна почати після певного індексу.
// Для цього необхідно в дужках першим параметром вказати слово, літеру, або рядок,
// який ми хочемо знайти та через кому другим параметром передати позицію, після якої ми хочемо шукати.
// Власне, другий параметр і називається 'fromIndex'.
// 'fromIndex' – це не обов'язковий параметр, який позначає розміщення в рядку та звідки починати пошук.
// Цей параметр може бути будь - яким цілим числом.За замовчуванням 'fromIndex' дорівнює 0.
// Якщо ж 'fromIndex' буде менше ніж 0, то пошук буде здійснюватися по всьому рядку(так само як би ми передавали 0).
//     Якщо 'fromIndex' більший або дорівнює довжині рядка, то 'indexOf()' поверне - 1.
// Приміром, ми в нашому рядку шукаємо те ж слово 'welcome', але хочемо знати чи знаходиться воно після 10 індексу.
// Наш код виглядатиме наступним чином: text.indexOf('welcome', 10) і нам повернеться 13.
// Якщо ж ми спробуємо ввести  text.indexOf('welcome', 20), то отримаємо - 1. Тому, що 'welcome' не з'являється після 20 позиції

// ###########################################################################################################################################################

// // ==========================================Task-4

// Який результат наведеного нижче коду ?
// const str = 'The quick brown fox jumps over the lazy dog.';

// console.log(str.slice(4, 10));

// 'jumps'

// 'fox jumps over the lazy dog'

// 'quick '                            V

// ''

// Пояснення правильного варіанту:
// Метод '.slice()' допомагає отримати частину рядка(підрядок) із основного рядка не змінюючи оригінальний рядок.
// У методу '.slice()' є два параметри: 'beginIndex' та 'endIndex'.
// 'beginIndex' – це індекс, який ми записуємо першим в дужках і з якого починається вилучення підрядка(нумерація починається із нуля).
// Якщо індекс має від'ємне значення, то рахунок починається із кінця рядка.
// Приміром, якщо ми введемо '.slice(-2)', то метод почне вилучати підрядок із другого елемента в кінці рядка.
// Якщо 'beginIndex' не є числом, то він буде трактуватися як 0 і вилучення почнеться із самого початку рядка.
// Якщо ж 'beginIndex' більший або дорівнює довжині рядка, то метод поверне пустий рядок.
// 'endIndex' – це індекс, перед яким завершується вилучення підрядка(нумерація починається з нуля).
// Варто пам'ятати, що символ із цим індексом не буде включено до підрядка.
// Якщо 'endIndex' упущений, undefined або більший за довжину рядка, то '.slice()' вилучить все до самого кінця рядка.
// Якщо 'endIndex' вказаний, але менший за 'beginIndex', то  '.slice()' поверне пустий рядок.Наприклад, 'slice(7, 4)' поверне ' '

// ###########################################################################################################################################################

// // ==========================================Task-5

// Що перевіряє код, наведений нижче ?
//     function isLetter(ch) {
//         return ch.toLowerCase() !== ch.toUpperCase();
//     }

// Що 'ch' не у верхньому регістрі

// Що 'ch' – це число

// Що 'ch' в нижньому регістрі

// Що 'ch' – це літера                  V

// Пояснення правильного варіанту:
// В JavaScript можна перевірити, чи є символ літерою чи ні.
// Зробити це можна за допомогою приведення рядка до нижнього регістру та перевіркою,
// чи цей рядок в нижньому регістрі відповідає рядку у верхньому регістрі.
// Якщо не відповідає, то цей символ - літера і 'console.log()' поверне true.
// Якщо це інший символ, наприклад, число, то перевірка поверне false, тому що числа у верхньому та нижньому регістрах будуть однакові

// ###########################################################################################################################################################

// // ==========================================Task-6

// Який результат наведеного нижче коду ?
// const string = 'banana';

// for (const char of string) {
//     console.log(char);
// }

// 'b', 'a', 'n', 'a', 'n', 'a'               V

// 'a', 'n', 'a', 'n', 'a', 'b'

// 'ananab'

// 'banana'

// Пояснення правильного варіанту:
// Для того, щоб перебрати всі символи в рядку незалежно від індексу чудово підходить цикл 'for of'.
// Він не потребує перевірок та зміни індексу, до того ж пишеться набагато швидше.
// Якщо брати наш приклад то, ми просто перебираємо кожен символ в рядку по черзі, а 'console.log()' виводить нам всі ці символи один за одним

// ###########################################################################################################################################################

// // ==========================================Task-7

// Який остаточний результат наведеного нижче коду ?
// const string = 'Do you have any hobbies?';
// let result = '';

// for (const char of string) {
//     if (char !== ' ') {
//         result += char;
//     }
//     console.log(result);
// }

// 'Doyouhaveanyhobbies?'                     V

// 'Do you have any hobbies?'

// undefined

// ''

// Пояснення правильного варіанту:
// В рядках можна не лише шукати індекси, слова та підрядки, також в нас є можливість модифікувати рядок.
// В нашому коді ми видаляємо пробіли.Як це саме відбувається ?
// Перед тим, як написати цикл, який буде перебирати наш рядок, для зручності ми оголошуємо змінну 'result', в яку будемо записувати наш новий рядок.
// Далі ми пишемо сам цикл.Оскільки в нашому випадку індекси не важливі, ми використовуємо цикл 'for of'.
// В тілі циклу ми записуємо умову: якщо наш цикл знаходить символ, який не є пробілом, то ми його додаємо до результату.
// І в кінці ми виводимо сам результат.
// Наприклад, при першій ітерації ми знаходимо літеру 'D'.Далі ми переходимо до умови і перевіряємо чи наша знайдена літера не пробіл.
// Ми бачимо, що вона не пробіл і додаємо її до результату.
// Все те ж саме відбувається й під час другої ітерації, коли ми знаходимо літеру 'o'.
// Під час третьої ітерації наш цикл знаходить пробіл.Далі він перевіряє умову.
// Наша умова виявляється false і в такому випадку ми нічого не додаємо до результату і просто переходимо до наступної ітерації.
// І так відбувається, поки ми не переберемо весь рядок

// ###########################################################################################################################################################

// // ==========================================Task-8

// // --------------------===================== Сonditions --------------------=====================
// Напиши функцію getStringLength, яка приймає рядок input та повертає його довжину.

// // --------------------===================== Result --------------------=====================

// /**
//  * @param {string} input
//  *
//  * @returns {number}
//  */
// function getStringLength(input) {
//     return input.length;
// }

// ###########################################################################################################################################################

// // ==========================================Task-9

// // --------------------===================== Сonditions --------------------=====================












