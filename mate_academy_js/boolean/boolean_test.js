// ###########################################################################################################################################################

// // ==========================================Task-1

// Яким буде значення змінної 'canStartCoding' ?
// const hasComputer = true;
// const hasCoffee = false;

// const canStartCoding = hasComputer && hasCoffee;

// false

// true            V

// Пояснення правильного варіанту:
// Оператор '&&' використовується для перевірки того, що обидві умови вірні(тобто обидва true).

// Ми маємо як мінімум одного учасника порівняння зі значенням брехня(hasCoffee = false).
// Це означає, що умова, щоб обидва значення були вірні, вже не виконується.
// Тому під час перевірки: hasComputer && hasCoffee
// Ми перевіряємо: true && false
// В результаті отримаємо: false.У canStartCoding зберігатиметься результат порівняння – false.

// Якби ми порівнювали true && true, то в результаті отримали б true(адже обидві умови справді вірні).

// ###########################################################################################################################################################

// // ==========================================Task-2

// Які значення може мати змінна булевого типу(вибери декілька варіантів) ?

// wrong

// true            V

// correct

// false           V

// Пояснення правильного варіанту:
// Коли ми перевіряємо, чи виконується якась умова, то отримуємо одну з двох відповідей 'так, вірно' або 'ні, не вірно'.
// Для зберігання результатів таких перевірок в JavaScript є тип даних Boolean.
// Змінні булевого типу можуть мати лише два значення: true(вірно) або false(брехня).

// ###########################################################################################################################################################

// // ==========================================Task-3

// Як перевірити, що змінна 'item' НЕ дорівнює 'jeans' ?

// item == !jeans

// item = ! 'jeans'

// item !== 'jeans'            V

// Пояснення правильного варіанту:
// Правильний варіант:
// Оператор '!==' використовується для перевірки, що значення НЕ рівні
// Наприклад, if (item !== 'jeans') перевірятиме, щоб item не зберігав значення 'jeans'.

// Решти команд взагалі не існує в програмуванні, тому оператори '=!' та '==!' писати не можна.

// ###########################################################################################################################################################

// // ==========================================Task-4

// Як перевірити, що змінна 'age' більше або дорівнює 16 ?

// age >= 16           V

// age > 16

// age <= 16

// age < 16

// Пояснення правильного варіанту:
// Правильний варіант:
// age >= 16 перевіряє, що 'age' більше або дорівнює 16

// Інші варіанти для інших цілей:
// age > 16 перевіряє, що 'age' більше 16
// age < 16 перевіряє, що 'age' менше 16
// age <= 16 перевіряє, що 'age' менше або дорівнює 16

// ###########################################################################################################################################################

// // ==========================================Task-5

// Як перевірити, що змінна 'price' менша за 150 ?

// price >= 150

// price <= 150

// price > 150

// price < 150             V

// Пояснення правильного варіанту:
// Правильний варіант:
// price < 150 перевіряє, що 'price' менше 150

// Інші варіанти для інших цілей:
// price > 150 перевіряє, що 'price' більше 150
// price >= 150 перевіряє, що 'price' більше або дорівнює 150
// price <= 150 перевіряє, що 'price' менше або дорівнює 150

// ###########################################################################################################################################################

// // ==========================================Task-6

// Як перевірити, що змінна 'color' дорівнює 'blue' ?

// color = 'blue'

// color === 'blue'            V

// color !== 'blue'

// Пояснення правильного варіанту:
// Правильний варіант:
// Оператор '===' використовується для порівняння значень змінних.
//     Наприклад, if (age === 10) перевірятиме чи значення змінної 'age' дорівнює числу 10.

// Інші варіанти для інших цілей:
// Оператор '=' записує значення у змінну.
//     Наприклад, age = 10. У змінній 'age' тепер зберігається число 10.

// Оператор '!==' перевіряє, що значення не рівні між собою.
//     Наприклад, if (age !== 9).Перевіряємо, щоб 'age' не був числом 9.

// ###########################################################################################################################################################

// // ==========================================Task-7

// Яким буде значення змінної 'canMakeBreak' ?
// const isTired = false;
// const isHungry = true;

// const canMakeBreak = isTired || isHungry;

// false

// true             V

// Пояснення правильного варіанту:
// Оператор '||' використовується для перевірки того, що хоча б одна з умов вірна(true).

// Ми маємо як мінімум одного учасника порівняння зі значенням вірно(isHungry = true).
// Це означає, що умова, що хоча б одне значення було вірне, виконується.
// Тому під час перевірки: isTired || isHungry
// Ми перевіряємо: false || true
// В результаті отримаємо: true.У canMakeBreak зберігатиметься результат порівняння – true.

// Якби ми порівнювали false || false, то в результаті отримали б false(адже не було б жодного варіанту true).

// ###########################################################################################################################################################

// // ==========================================Task-8

// // --------------------===================== Сonditions --------------------=====================
// Зміни значення однієї з констант(isHoliday або isVacation) так, щоб canStayHome зберігало true, а значить, ми залишаємося вдома!

// // --------------------===================== Result --------------------=====================
// const isHoliday = false;
// const isVacation = true;

// const canStayHome = isHoliday || isVacation;

// ###########################################################################################################################################################

// // ==========================================Task-9

// // --------------------===================== Сonditions --------------------=====================
// Зміни значення однієї з констант(isWaterHot або haveTea) так, щоб canMakeTea зберігало false і ми не змогли зробити собі чай.
// const isWaterHot = true;
// const haveTea = true;

// const canMakeTea = isWaterHot && haveTea;

// // --------------------===================== Result --------------------=====================
// const isWaterHot = false;
// const haveTea = true;

// const canMakeTea = isWaterHot && haveTea;

// ###########################################################################################################################################################

// // ==========================================Task-10

// // --------------------===================== Сonditions --------------------=====================
// Зміни значення констант(hasEggs, hasFlour або hasSugar) так, щоб canMakeCake мало значення true і ми могли приступити до приготування торта.
// const hasEggs = true;
// const hasFlour = false;
// const hasSugar = false;

// const canMakeCake = hasEggs && hasFlour && hasSugar;

// // --------------------===================== Result --------------------=====================
// const hasEggs = true;
// const hasFlour = true;
// const hasSugar = true;

// const canMakeCake = hasEggs && hasFlour && hasSugar;